name: push master

on:
  push:
    branches: [master]

jobs:
  extract_branch:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.step1.outputs.branch }}
    steps:
      - id: step1
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"

  # TODO run check before deploy
  deploy:
    runs-on: ubuntu-latest
    needs: [extract_branch]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Build
        uses: ./.github/actions/build
        with:
          infura_project_id: ${{ secrets.INFURA_PROJECT_ID }}
          alchemy_key: ${{ secrets.ALCHEMY_KEY }}
          blocknative_dapp_id: ${{ secrets.BLOCKNATIVE_DAPP_ID }}
          portis_dapp_id: ${{ secrets.PORTIS_DAPP_ID }}
          fathom_side_id: ${{ secrets.FATHOM_SITE_ID }}
          ga_id: ${{ secrets.GA_ID }}

      - name: ipfs deploy
        env:
          IPFS_DEPLOY_PINATA__API_KEY: ${{ secrets.PINATA_API_KEY }}
          IPFS_DEPLOY_PINATA__SECRET_API_KEY: ${{ secrets.PINATA_SECRET_API_KEY }}
          IPFS_DEPLOY_CLOUDFLARE__API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          IPFS_DEPLOY_CLOUDFLARE__ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
          IPFS_DEPLOY_CLOUDFLARE__RECORD: ${{ secrets.CLOUDFLARE_RECORD }}
        run: npx ipfs-deploy ./dist -p pinata -d cloudflare


#      - uses: actions/download-artifact@master
#        with:
#          name: build_result
#          path: ./dist
#
#      - name: push ${{ needs.extract_branch.outputs.name }} branch to pinata
#        uses: anantaramdas/ipfs-pinata-deploy-action@v1.6.4
#        with:
#          pin-name: ureeka-${{ needs.extract_branch.outputs.name }}
#          path: ./dist
#          pinata-api-key: '${{ secrets.PINATA_API_KEY }}'
#          pinata-secret-api-key: '${{ secrets.PINATA_SECRET_API_KEY }}'
#          verbose: true
#          remove-old: false

#  cloudflare_purge_cache:
#    runs-on: ubuntu-latest
#    needs: [deploy]
#    steps:
#      - name: Purge cache
#        uses: jakejarvis/cloudflare-purge-action@master
#        env:
#          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
#          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}

  # TODO notify slack about deploy result
